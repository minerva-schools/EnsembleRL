{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "X0uiTOAeVs1n"
   },
   "source": [
    "## Deep SARSA in Cartpole using Keras-RL.\n",
    "#### This is a step-by-step guide to using a neural network-based SARSA in Cartpole, a simple OpenAI gym environment.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "LGKv_fE3V6d0"
   },
   "source": [
    "### Table of Contents\n",
    "\n",
    "#### [Setup and Keras-RL](#Setup_and_Environment)\n",
    "- in this section, we import all the necessary libraries and do a minor modification to the Keras-RL Sarsa agent;\n",
    "\n",
    "#### [Deep SARSA](#Sarsa)\n",
    "- in this section, we use Deep SARSA to solve the Cartpole problem.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "aLLcBxdHXnqy"
   },
   "source": [
    "## Setup and Keras-RL <a name='Setup_and_Environment'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qE00evye7xo0"
   },
   "outputs": [],
   "source": [
    "# pip install keras-rl"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "dHgiQQtkV41t"
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "klTUy1NnyF-s"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/Users/gelanatostaeva/anaconda3/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import gym\n",
    "# %tensorflow_version 1.14\n",
    "from keras.layers import Dense, Flatten, Activation\n",
    "from keras.models import Sequential\n",
    "from keras.optimizers import Adam\n",
    "\n",
    "from rl.agents import SARSAAgent\n",
    "from rl.policy import EpsGreedyQPolicy\n",
    "from rl.callbacks import TrainEpisodeLogger"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xTOA7WUd0Ev8"
   },
   "source": [
    "The code below is from [Keras-RL](https://github.com/keras-rl/keras-rl/blob/master/rl/agents/sarsa.py#L17) with a minor modification to get the probabilities vector (which we need for the Ensemble learning part as explained at the end of the associated Medium post)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "IAHUBNb3YbCq"
   },
   "source": [
    "*Note that we are importing some libraries again; some versions of tensorflow are not compatible with parts of this implementation, and importing twice seemed to fix it.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gqygzl17EcbW"
   },
   "outputs": [],
   "source": [
    "import collections\n",
    "\n",
    "from keras.callbacks import History\n",
    "from keras.models import Model\n",
    "from keras.layers import Input, Lambda\n",
    "import keras.backend as K\n",
    "\n",
    "from rl.core import Agent\n",
    "from rl.agents.dqn import mean_q\n",
    "from rl.util import huber_loss\n",
    "from rl.policy import EpsGreedyQPolicy, GreedyQPolicy\n",
    "from rl.util import get_object_config\n",
    "\n",
    "\n",
    "class SARSAAgent(Agent):\n",
    "    \"\"\"This class defines the SARSA agent\n",
    "    \"\"\"\n",
    "    def __init__(self, model, nb_actions, policy, test_policy=EpsGreedyQPolicy(), gamma=.9, nb_steps_warmup=10,\n",
    "                 train_interval=1, delta_clip=np.inf, *args, **kwargs):\n",
    "        super(SarsaAgent, self).__init__(*args, **kwargs)\n",
    "\n",
    "        if policy is None:\n",
    "            policy = EpsGreedyQPolicy()\n",
    "        if test_policy is None:\n",
    "            test_policy = GreedyQPolicy()\n",
    "\n",
    "        self.model = model\n",
    "        self.nb_actions = nb_actions\n",
    "        self.policy = policy\n",
    "        self.test_policy = test_policy\n",
    "        self.gamma = gamma\n",
    "        self.nb_steps_warmup = nb_steps_warmup\n",
    "        self.train_interval = train_interval\n",
    "\n",
    "        self.delta_clip = delta_clip\n",
    "        self.compiled = False\n",
    "        self.actions = None\n",
    "        self.observations = None\n",
    "        self.rewards = None\n",
    "        self.q_values=[]\n",
    "\n",
    "    def compute_batch_q_values(self, state_batch):\n",
    "        batch = self.process_state_batch(state_batch)\n",
    "        q_values = self.model.predict_on_batch(batch)\n",
    "        assert q_values.shape == (len(state_batch), self.nb_actions)\n",
    "        return q_values\n",
    "\n",
    "    def compute_q_values(self, state):\n",
    "        q_values = self.compute_batch_q_values([state]).flatten()\n",
    "        assert q_values.shape == (self.nb_actions,)\n",
    "        return q_values\n",
    "\n",
    "    def process_state_batch(self, batch):\n",
    "        batch = np.array(batch)\n",
    "        if self.processor is None:\n",
    "            return batch\n",
    "        return self.processor.process_state_batch(batch)\n",
    "\n",
    "    def get_config(self):\n",
    "        config = super(SarsaAgent, self).get_config()\n",
    "        config['nb_actions'] = self.nb_actions\n",
    "        config['gamma'] = self.gamma\n",
    "        config['nb_steps_warmup'] = self.nb_steps_warmup\n",
    "        config['train_interval'] = self.train_interval\n",
    "        config['delta_clip'] = self.delta_clip\n",
    "        config['model'] = get_object_config(self.model)\n",
    "        config['policy'] = get_object_config(self.policy)\n",
    "        config['test_policy'] = get_object_config(self.test_policy)\n",
    "        return config\n",
    "\n",
    "    def compile(self, optimizer, metrics=[]):\n",
    "        metrics += [mean_q]  \n",
    "\n",
    "        def clipped_masked_error(args):\n",
    "            y_true, y_pred, mask = args\n",
    "            loss = huber_loss(y_true, y_pred, self.delta_clip)\n",
    "            loss *= mask  \n",
    "            return K.sum(loss, axis=-1)\n",
    "\n",
    "        # Create trainable model. The problem is that we need to mask the output since we only\n",
    "        # ever want to update the Q values for a certain action. The way we achieve this is by\n",
    "        # using a custom Lambda layer that computes the loss. This gives us the necessary flexibility\n",
    "        # to mask out certain parameters by passing in multiple inputs to the Lambda layer.\n",
    "        y_pred = self.model.output\n",
    "        y_true = Input(name='y_true', shape=(self.nb_actions,))\n",
    "        mask = Input(name='mask', shape=(self.nb_actions,))\n",
    "        loss_out = Lambda(clipped_masked_error, output_shape=(1,), name='loss')([y_pred, y_true, mask])\n",
    "        ins = [self.model.input] if type(self.model.input) is not list else self.model.input\n",
    "        trainable_model = Model(inputs=ins + [y_true, mask], outputs=[loss_out, y_pred])\n",
    "        assert len(trainable_model.output_names) == 2\n",
    "        combined_metrics = {trainable_model.output_names[1]: metrics}\n",
    "        losses = [\n",
    "            lambda y_true, y_pred: y_pred,  # loss is computed in Lambda layer\n",
    "            lambda y_true, y_pred: K.zeros_like(y_pred),  # we only include this for the metrics\n",
    "        ]\n",
    "        trainable_model.compile(optimizer=optimizer, loss=losses, metrics=combined_metrics)\n",
    "        self.trainable_model = trainable_model\n",
    "\n",
    "        self.compiled = True\n",
    "\n",
    "    def load_weights(self, filepath):\n",
    "        self.model.load_weights(filepath)\n",
    "\n",
    "    def save_weights(self, filepath, overwrite=False):\n",
    "        self.model.save_weights(filepath, overwrite=overwrite)\n",
    "\n",
    "    def reset_states(self):\n",
    "        self.actions = collections.deque(maxlen=2)\n",
    "        self.observations = collections.deque(maxlen=2)\n",
    "        self.rewards = collections.deque(maxlen=2)\n",
    "        if self.compiled:\n",
    "            self.model.reset_states()\n",
    "\n",
    "    def forward(self, observation):\n",
    "        # Select an action.\n",
    "        q_values = self.compute_q_values([observation])\n",
    "        if self.training:\n",
    "            action = self.policy.select_action(q_values=q_values)\n",
    "        else:\n",
    "            action = self.test_policy.select_action(q_values=q_values)\n",
    "\n",
    "        # Book-keeping.\n",
    "        self.observations.append(observation)\n",
    "        self.actions.append(action)\n",
    "        # self.q_values=q_values\n",
    "\n",
    "        return action\n",
    "\n",
    "    def backward(self, reward, terminal):\n",
    "        metrics = [np.nan for _ in self.metrics_names]\n",
    "        if not self.training:\n",
    "            # We're done here. No need to update the experience memory since we only use the working\n",
    "            # memory to obtain the state over the most recent observations.\n",
    "            return metrics\n",
    "\n",
    "        # Train the network on a single stochastic batch.\n",
    "        if self.step > self.nb_steps_warmup and self.step % self.train_interval == 0:\n",
    "            # Start by extracting the necessary parameters (we use a vectorized implementation).\n",
    "            self.rewards.append(reward)\n",
    "            if len(self.observations) < 2:\n",
    "                return metrics  # not enough data yet\n",
    "\n",
    "            state0_batch = [self.observations[0]]\n",
    "            reward_batch = [self.rewards[0]]\n",
    "            action_batch = [self.actions[0]]\n",
    "            terminal1_batch = [0.] if terminal else [1.]\n",
    "            state1_batch = [self.observations[1]]\n",
    "            action1_batch = [self.actions[1]]\n",
    "\n",
    "            # Prepare and validate parameters.\n",
    "            state0_batch = self.process_state_batch(state0_batch)\n",
    "            state1_batch = self.process_state_batch(state1_batch)\n",
    "            terminal1_batch = np.array(terminal1_batch)\n",
    "            reward_batch = np.array(reward_batch)\n",
    "            assert reward_batch.shape == (1,)\n",
    "            assert terminal1_batch.shape == reward_batch.shape\n",
    "            assert len(action_batch) == len(reward_batch)\n",
    "\n",
    "            batch = self.process_state_batch(state1_batch)\n",
    "            q_values = self.compute_q_values(batch)\n",
    "            q_values = q_values.reshape((1, self.nb_actions))\n",
    "            probs=q_values[0]\n",
    "            probs/=np.sum(probs)\n",
    "            self.q_values.append(probs)\n",
    "            # self.q_values/=np.sum(q_values)\n",
    "\n",
    "            q_batch = q_values[0, action1_batch]\n",
    "\n",
    "            assert q_batch.shape == (1,)\n",
    "            targets = np.zeros((1, self.nb_actions))\n",
    "            dummy_targets = np.zeros((1,))\n",
    "            masks = np.zeros((1, self.nb_actions))\n",
    "\n",
    "            # Compute r_t + gamma * Q(s_t+1, a_t+1)\n",
    "            discounted_reward_batch = self.gamma * q_batch\n",
    "            # Set discounted reward to zero for all states that were terminal.\n",
    "            discounted_reward_batch *= terminal1_batch\n",
    "            assert discounted_reward_batch.shape == reward_batch.shape\n",
    "            Rs = reward_batch + discounted_reward_batch\n",
    "            for idx, (target, mask, R, action) in enumerate(zip(targets, masks, Rs, action_batch)):\n",
    "                target[action] = R  # update action with estimated accumulated reward\n",
    "                dummy_targets[idx] = R\n",
    "                mask[action] = 1.  # enable loss for this specific action\n",
    "            targets = np.array(targets).astype('float32')\n",
    "            masks = np.array(masks).astype('float32')\n",
    "\n",
    "            # Finally, perform a single update on the entire batch. We use a dummy target since\n",
    "            # the actual loss is computed in a Lambda layer that needs more complex input. However,\n",
    "            # it is still useful to know the actual target to compute metrics properly.\n",
    "            state0_batch = state0_batch.reshape((1,) + state0_batch.shape)\n",
    "            ins = [state0_batch] if type(self.model.input) is not list else state0_batch\n",
    "            metrics = self.trainable_model.train_on_batch(ins + [targets, masks], [dummy_targets, targets])\n",
    "            metrics = [metric for idx, metric in enumerate(metrics) if idx not in (1, 2)]  # throw away individual losses\n",
    "            metrics += self.policy.metrics\n",
    "            if self.processor is not None:\n",
    "                metrics += self.processor.metrics\n",
    "        return metrics\n",
    "\n",
    "    @property\n",
    "    def layers(self):\n",
    "        return self.model.layers[:]\n",
    "\n",
    "    @property\n",
    "    def metrics_names(self):\n",
    "        # Throw away individual losses and replace output name since this is hidden from the user.\n",
    "        assert len(self.trainable_model.output_names) == 2\n",
    "        dummy_output_name = self.trainable_model.output_names[1]\n",
    "        model_metrics = [name for idx, name in enumerate(self.trainable_model.metrics_names) if idx not in (1, 2)]\n",
    "        model_metrics = [name.replace(dummy_output_name + '_', '') for name in model_metrics]\n",
    "\n",
    "        names = model_metrics + self.policy.metrics_names[:]\n",
    "        if self.processor is not None:\n",
    "            names += self.processor.metrics_names[:]\n",
    "        return names\n",
    "\n",
    "    @property\n",
    "    def policy(self):\n",
    "        return self.__policy\n",
    "\n",
    "    @policy.setter\n",
    "    def policy(self, policy):\n",
    "        self.__policy = policy\n",
    "        self.__policy._set_agent(self)\n",
    "\n",
    "    @property\n",
    "    def test_policy(self):\n",
    "        return self.__test_policy\n",
    "\n",
    "    @test_policy.setter\n",
    "    def test_policy(self, policy):\n",
    "        self.__test_policy = policy\n",
    "        self.__test_policy._set_agent(self)\n",
    "\n",
    "# Aliases\n",
    "SarsaAgent = SARSAAgent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xT_nhQ0aXw5D"
   },
   "source": [
    "## Deep SARSA in Cartpole <a name='Sarsa'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "E6WpQd6gEjoT"
   },
   "outputs": [],
   "source": [
    "#Setting up the environment\n",
    "env = gym.make('CartPole-v1')\n",
    "seed_val = 456\n",
    "env.seed(seed_val)\n",
    "np.random.seed(seed_val)\n",
    "\n",
    "#Getting the state and action space\n",
    "states = env.observation_space.shape[0]\n",
    "actions = env.action_space.n\n",
    "\n",
    "#Defining a Neural Network function for our Cartpole agent \n",
    "def agent(states, actions):\n",
    "    \"\"\"Creating a simple Deep Neural Network.\"\"\"\n",
    "    model = Sequential()\n",
    "    model.add(Flatten(input_shape = (1, states)))\n",
    "    model.add(Dense(24, activation='relu'))\n",
    "    model.add(Dense(24, activation='relu'))\n",
    "    model.add(Dense(24, activation='relu'))\n",
    "    model.add(Dense(actions, activation='linear'))\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 374
    },
    "colab_type": "code",
    "id": "2M-A8mMOFVq5",
    "outputId": "a347642b-444c-4360-9fca-1a6e0b02a628"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for 50000 steps ...\n",
      "Interval 1 (0 steps performed)\n",
      "10000/10000 [==============================] - 21s 2ms/step - reward: 1.0000\n",
      "488 episodes - episode_reward: 20.248 [8.000, 155.000] - loss: 0.013 - mse: 0.939 - mean_q: 1.436\n",
      "\n",
      "Interval 2 (10000 steps performed)\n",
      "10000/10000 [==============================] - 20s 2ms/step - reward: 1.0000\n",
      "446 episodes - episode_reward: 22.538 [8.000, 284.000] - loss: 0.004 - mse: 0.975 - mean_q: 1.444\n",
      "\n",
      "Interval 3 (20000 steps performed)\n",
      "10000/10000 [==============================] - 21s 2ms/step - reward: 1.0000\n",
      "316 episodes - episode_reward: 31.848 [8.000, 215.000] - loss: 0.003 - mse: 1.000 - mean_q: 1.445\n",
      "\n",
      "Interval 4 (30000 steps performed)\n",
      "10000/10000 [==============================] - 21s 2ms/step - reward: 1.0000\n",
      "345 episodes - episode_reward: 28.939 [8.000, 500.000] - loss: 0.003 - mse: 0.999 - mean_q: 1.444\n",
      "\n",
      "Interval 5 (40000 steps performed)\n",
      "10000/10000 [==============================] - 22s 2ms/step - reward: 1.0000\n",
      "done, took 105.404 seconds\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.callbacks.History at 0x15db29e90>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting our neural network\n",
    "model = agent(states, actions)\n",
    "#Defining SARSA Keras-RL agent: inputing the policy and the model\n",
    "sarsa = SARSAAgent(model=model, nb_actions=actions, policy=EpsGreedyQPolicy())\n",
    "#Compiling SARSA with mean squared error loss\n",
    "sarsa.compile('adam', metrics=[\"mse\"])\n",
    "\n",
    "#Training the agent for 50000 steps\n",
    "sarsa.fit(env, nb_steps=50000, visualize=False, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "ikHuz4zZFh9s",
    "outputId": "dcb004b6-c8eb-4326-cf03-729936546c2b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing for 500 episodes ...\n",
      "Episode 1: reward: 117.000, steps: 117\n",
      "Episode 2: reward: 112.000, steps: 112\n",
      "Episode 3: reward: 116.000, steps: 116\n",
      "Episode 4: reward: 109.000, steps: 109\n",
      "Episode 5: reward: 121.000, steps: 121\n",
      "Episode 6: reward: 111.000, steps: 111\n",
      "Episode 7: reward: 109.000, steps: 109\n",
      "Episode 8: reward: 115.000, steps: 115\n",
      "Episode 9: reward: 117.000, steps: 117\n",
      "Episode 10: reward: 119.000, steps: 119\n",
      "Episode 11: reward: 118.000, steps: 118\n",
      "Episode 12: reward: 117.000, steps: 117\n",
      "Episode 13: reward: 118.000, steps: 118\n",
      "Episode 14: reward: 122.000, steps: 122\n",
      "Episode 15: reward: 113.000, steps: 113\n",
      "Episode 16: reward: 126.000, steps: 126\n",
      "Episode 17: reward: 117.000, steps: 117\n",
      "Episode 18: reward: 121.000, steps: 121\n",
      "Episode 19: reward: 117.000, steps: 117\n",
      "Episode 20: reward: 118.000, steps: 118\n",
      "Episode 21: reward: 118.000, steps: 118\n",
      "Episode 22: reward: 112.000, steps: 112\n",
      "Episode 23: reward: 119.000, steps: 119\n",
      "Episode 24: reward: 123.000, steps: 123\n",
      "Episode 25: reward: 116.000, steps: 116\n",
      "Episode 26: reward: 120.000, steps: 120\n",
      "Episode 27: reward: 108.000, steps: 108\n",
      "Episode 28: reward: 114.000, steps: 114\n",
      "Episode 29: reward: 116.000, steps: 116\n",
      "Episode 30: reward: 117.000, steps: 117\n",
      "Episode 31: reward: 123.000, steps: 123\n",
      "Episode 32: reward: 110.000, steps: 110\n",
      "Episode 33: reward: 120.000, steps: 120\n",
      "Episode 34: reward: 109.000, steps: 109\n",
      "Episode 35: reward: 116.000, steps: 116\n",
      "Episode 36: reward: 126.000, steps: 126\n",
      "Episode 37: reward: 114.000, steps: 114\n",
      "Episode 38: reward: 105.000, steps: 105\n",
      "Episode 39: reward: 109.000, steps: 109\n",
      "Episode 40: reward: 110.000, steps: 110\n",
      "Episode 41: reward: 120.000, steps: 120\n",
      "Episode 42: reward: 109.000, steps: 109\n",
      "Episode 43: reward: 115.000, steps: 115\n",
      "Episode 44: reward: 115.000, steps: 115\n",
      "Episode 45: reward: 117.000, steps: 117\n",
      "Episode 46: reward: 25.000, steps: 25\n",
      "Episode 47: reward: 110.000, steps: 110\n",
      "Episode 48: reward: 120.000, steps: 120\n",
      "Episode 49: reward: 123.000, steps: 123\n",
      "Episode 50: reward: 119.000, steps: 119\n",
      "Episode 51: reward: 124.000, steps: 124\n",
      "Episode 52: reward: 112.000, steps: 112\n",
      "Episode 53: reward: 113.000, steps: 113\n",
      "Episode 54: reward: 117.000, steps: 117\n",
      "Episode 55: reward: 122.000, steps: 122\n",
      "Episode 56: reward: 114.000, steps: 114\n",
      "Episode 57: reward: 122.000, steps: 122\n",
      "Episode 58: reward: 119.000, steps: 119\n",
      "Episode 59: reward: 108.000, steps: 108\n",
      "Episode 60: reward: 120.000, steps: 120\n",
      "Episode 61: reward: 119.000, steps: 119\n",
      "Episode 62: reward: 114.000, steps: 114\n",
      "Episode 63: reward: 116.000, steps: 116\n",
      "Episode 64: reward: 121.000, steps: 121\n",
      "Episode 65: reward: 109.000, steps: 109\n",
      "Episode 66: reward: 116.000, steps: 116\n",
      "Episode 67: reward: 115.000, steps: 115\n",
      "Episode 68: reward: 121.000, steps: 121\n",
      "Episode 69: reward: 121.000, steps: 121\n",
      "Episode 70: reward: 112.000, steps: 112\n",
      "Episode 71: reward: 120.000, steps: 120\n",
      "Episode 72: reward: 111.000, steps: 111\n",
      "Episode 73: reward: 109.000, steps: 109\n",
      "Episode 74: reward: 111.000, steps: 111\n",
      "Episode 75: reward: 117.000, steps: 117\n",
      "Episode 76: reward: 113.000, steps: 113\n",
      "Episode 77: reward: 116.000, steps: 116\n",
      "Episode 78: reward: 114.000, steps: 114\n",
      "Episode 79: reward: 119.000, steps: 119\n",
      "Episode 80: reward: 108.000, steps: 108\n",
      "Episode 81: reward: 122.000, steps: 122\n",
      "Episode 82: reward: 112.000, steps: 112\n",
      "Episode 83: reward: 110.000, steps: 110\n",
      "Episode 84: reward: 106.000, steps: 106\n",
      "Episode 85: reward: 110.000, steps: 110\n",
      "Episode 86: reward: 124.000, steps: 124\n",
      "Episode 87: reward: 117.000, steps: 117\n",
      "Episode 88: reward: 116.000, steps: 116\n",
      "Episode 89: reward: 124.000, steps: 124\n",
      "Episode 90: reward: 117.000, steps: 117\n",
      "Episode 91: reward: 114.000, steps: 114\n",
      "Episode 92: reward: 114.000, steps: 114\n",
      "Episode 93: reward: 114.000, steps: 114\n",
      "Episode 94: reward: 25.000, steps: 25\n",
      "Episode 95: reward: 121.000, steps: 121\n",
      "Episode 96: reward: 120.000, steps: 120\n",
      "Episode 97: reward: 117.000, steps: 117\n",
      "Episode 98: reward: 109.000, steps: 109\n",
      "Episode 99: reward: 118.000, steps: 118\n",
      "Episode 100: reward: 110.000, steps: 110\n",
      "Episode 101: reward: 115.000, steps: 115\n",
      "Episode 102: reward: 112.000, steps: 112\n",
      "Episode 103: reward: 118.000, steps: 118\n",
      "Episode 104: reward: 109.000, steps: 109\n",
      "Episode 105: reward: 111.000, steps: 111\n",
      "Episode 106: reward: 114.000, steps: 114\n",
      "Episode 107: reward: 120.000, steps: 120\n",
      "Episode 108: reward: 115.000, steps: 115\n",
      "Episode 109: reward: 117.000, steps: 117\n",
      "Episode 110: reward: 126.000, steps: 126\n",
      "Episode 111: reward: 18.000, steps: 18\n",
      "Episode 112: reward: 115.000, steps: 115\n",
      "Episode 113: reward: 118.000, steps: 118\n",
      "Episode 114: reward: 120.000, steps: 120\n",
      "Episode 115: reward: 121.000, steps: 121\n",
      "Episode 116: reward: 113.000, steps: 113\n",
      "Episode 117: reward: 113.000, steps: 113\n",
      "Episode 118: reward: 105.000, steps: 105\n",
      "Episode 119: reward: 124.000, steps: 124\n",
      "Episode 120: reward: 114.000, steps: 114\n",
      "Episode 121: reward: 116.000, steps: 116\n",
      "Episode 122: reward: 111.000, steps: 111\n",
      "Episode 123: reward: 105.000, steps: 105\n",
      "Episode 124: reward: 116.000, steps: 116\n",
      "Episode 125: reward: 117.000, steps: 117\n",
      "Episode 126: reward: 115.000, steps: 115\n",
      "Episode 127: reward: 112.000, steps: 112\n",
      "Episode 128: reward: 114.000, steps: 114\n",
      "Episode 129: reward: 116.000, steps: 116\n",
      "Episode 130: reward: 124.000, steps: 124\n",
      "Episode 131: reward: 123.000, steps: 123\n",
      "Episode 132: reward: 110.000, steps: 110\n",
      "Episode 133: reward: 121.000, steps: 121\n",
      "Episode 134: reward: 117.000, steps: 117\n",
      "Episode 135: reward: 118.000, steps: 118\n",
      "Episode 136: reward: 109.000, steps: 109\n",
      "Episode 137: reward: 120.000, steps: 120\n",
      "Episode 138: reward: 110.000, steps: 110\n",
      "Episode 139: reward: 118.000, steps: 118\n",
      "Episode 140: reward: 109.000, steps: 109\n",
      "Episode 141: reward: 113.000, steps: 113\n",
      "Episode 142: reward: 112.000, steps: 112\n",
      "Episode 143: reward: 125.000, steps: 125\n",
      "Episode 144: reward: 111.000, steps: 111\n",
      "Episode 145: reward: 118.000, steps: 118\n",
      "Episode 146: reward: 116.000, steps: 116\n",
      "Episode 147: reward: 112.000, steps: 112\n",
      "Episode 148: reward: 113.000, steps: 113\n",
      "Episode 149: reward: 118.000, steps: 118\n",
      "Episode 150: reward: 113.000, steps: 113\n",
      "Episode 151: reward: 118.000, steps: 118\n",
      "Episode 152: reward: 119.000, steps: 119\n",
      "Episode 153: reward: 119.000, steps: 119\n",
      "Episode 154: reward: 114.000, steps: 114\n",
      "Episode 155: reward: 121.000, steps: 121\n",
      "Episode 156: reward: 114.000, steps: 114\n",
      "Episode 157: reward: 115.000, steps: 115\n",
      "Episode 158: reward: 118.000, steps: 118\n",
      "Episode 159: reward: 118.000, steps: 118\n",
      "Episode 160: reward: 116.000, steps: 116\n",
      "Episode 161: reward: 112.000, steps: 112\n",
      "Episode 162: reward: 112.000, steps: 112\n",
      "Episode 163: reward: 115.000, steps: 115\n",
      "Episode 164: reward: 116.000, steps: 116\n",
      "Episode 165: reward: 107.000, steps: 107\n",
      "Episode 166: reward: 118.000, steps: 118\n",
      "Episode 167: reward: 118.000, steps: 118\n",
      "Episode 168: reward: 113.000, steps: 113\n",
      "Episode 169: reward: 123.000, steps: 123\n",
      "Episode 170: reward: 118.000, steps: 118\n",
      "Episode 171: reward: 115.000, steps: 115\n",
      "Episode 172: reward: 114.000, steps: 114\n",
      "Episode 173: reward: 112.000, steps: 112\n",
      "Episode 174: reward: 126.000, steps: 126\n",
      "Episode 175: reward: 115.000, steps: 115\n",
      "Episode 176: reward: 116.000, steps: 116\n",
      "Episode 177: reward: 124.000, steps: 124\n",
      "Episode 178: reward: 18.000, steps: 18\n",
      "Episode 179: reward: 117.000, steps: 117\n",
      "Episode 180: reward: 119.000, steps: 119\n",
      "Episode 181: reward: 116.000, steps: 116\n",
      "Episode 182: reward: 117.000, steps: 117\n",
      "Episode 183: reward: 113.000, steps: 113\n",
      "Episode 184: reward: 110.000, steps: 110\n",
      "Episode 185: reward: 110.000, steps: 110\n",
      "Episode 186: reward: 121.000, steps: 121\n",
      "Episode 187: reward: 111.000, steps: 111\n",
      "Episode 188: reward: 118.000, steps: 118\n",
      "Episode 189: reward: 116.000, steps: 116\n",
      "Episode 190: reward: 115.000, steps: 115\n",
      "Episode 191: reward: 113.000, steps: 113\n",
      "Episode 192: reward: 109.000, steps: 109\n",
      "Episode 193: reward: 111.000, steps: 111\n",
      "Episode 194: reward: 121.000, steps: 121\n",
      "Episode 195: reward: 116.000, steps: 116\n",
      "Episode 196: reward: 110.000, steps: 110\n",
      "Episode 197: reward: 112.000, steps: 112\n",
      "Episode 198: reward: 112.000, steps: 112\n",
      "Episode 199: reward: 123.000, steps: 123\n",
      "Episode 200: reward: 115.000, steps: 115\n",
      "Episode 201: reward: 118.000, steps: 118\n",
      "Episode 202: reward: 111.000, steps: 111\n",
      "Episode 203: reward: 118.000, steps: 118\n",
      "Episode 204: reward: 121.000, steps: 121\n",
      "Episode 205: reward: 115.000, steps: 115\n",
      "Episode 206: reward: 125.000, steps: 125\n",
      "Episode 207: reward: 118.000, steps: 118\n",
      "Episode 208: reward: 119.000, steps: 119\n",
      "Episode 209: reward: 121.000, steps: 121\n",
      "Episode 210: reward: 113.000, steps: 113\n",
      "Episode 211: reward: 118.000, steps: 118\n",
      "Episode 212: reward: 115.000, steps: 115\n",
      "Episode 213: reward: 113.000, steps: 113\n",
      "Episode 214: reward: 117.000, steps: 117\n",
      "Episode 215: reward: 118.000, steps: 118\n",
      "Episode 216: reward: 120.000, steps: 120\n",
      "Episode 217: reward: 113.000, steps: 113\n",
      "Episode 218: reward: 118.000, steps: 118\n",
      "Episode 219: reward: 112.000, steps: 112\n",
      "Episode 220: reward: 118.000, steps: 118\n",
      "Episode 221: reward: 111.000, steps: 111\n",
      "Episode 222: reward: 119.000, steps: 119\n",
      "Episode 223: reward: 109.000, steps: 109\n",
      "Episode 224: reward: 108.000, steps: 108\n",
      "Episode 225: reward: 106.000, steps: 106\n",
      "Episode 226: reward: 115.000, steps: 115\n",
      "Episode 227: reward: 106.000, steps: 106\n",
      "Episode 228: reward: 112.000, steps: 112\n",
      "Episode 229: reward: 123.000, steps: 123\n",
      "Episode 230: reward: 111.000, steps: 111\n",
      "Episode 231: reward: 118.000, steps: 118\n",
      "Episode 232: reward: 109.000, steps: 109\n",
      "Episode 233: reward: 114.000, steps: 114\n",
      "Episode 234: reward: 112.000, steps: 112\n",
      "Episode 235: reward: 111.000, steps: 111\n",
      "Episode 236: reward: 113.000, steps: 113\n",
      "Episode 237: reward: 113.000, steps: 113\n",
      "Episode 238: reward: 113.000, steps: 113\n",
      "Episode 239: reward: 114.000, steps: 114\n",
      "Episode 240: reward: 104.000, steps: 104\n",
      "Episode 241: reward: 118.000, steps: 118\n",
      "Episode 242: reward: 112.000, steps: 112\n",
      "Episode 243: reward: 115.000, steps: 115\n",
      "Episode 244: reward: 121.000, steps: 121\n",
      "Episode 245: reward: 113.000, steps: 113\n",
      "Episode 246: reward: 115.000, steps: 115\n",
      "Episode 247: reward: 122.000, steps: 122\n",
      "Episode 248: reward: 113.000, steps: 113\n",
      "Episode 249: reward: 112.000, steps: 112\n",
      "Episode 250: reward: 117.000, steps: 117\n",
      "Episode 251: reward: 112.000, steps: 112\n",
      "Episode 252: reward: 110.000, steps: 110\n",
      "Episode 253: reward: 111.000, steps: 111\n",
      "Episode 254: reward: 108.000, steps: 108\n",
      "Episode 255: reward: 112.000, steps: 112\n",
      "Episode 256: reward: 116.000, steps: 116\n",
      "Episode 257: reward: 115.000, steps: 115\n",
      "Episode 258: reward: 124.000, steps: 124\n",
      "Episode 259: reward: 110.000, steps: 110\n",
      "Episode 260: reward: 118.000, steps: 118\n",
      "Episode 261: reward: 112.000, steps: 112\n",
      "Episode 262: reward: 112.000, steps: 112\n",
      "Episode 263: reward: 113.000, steps: 113\n",
      "Episode 264: reward: 111.000, steps: 111\n",
      "Episode 265: reward: 16.000, steps: 16\n",
      "Episode 266: reward: 124.000, steps: 124\n",
      "Episode 267: reward: 115.000, steps: 115\n",
      "Episode 268: reward: 110.000, steps: 110\n",
      "Episode 269: reward: 111.000, steps: 111\n",
      "Episode 270: reward: 114.000, steps: 114\n",
      "Episode 271: reward: 121.000, steps: 121\n",
      "Episode 272: reward: 112.000, steps: 112\n",
      "Episode 273: reward: 120.000, steps: 120\n",
      "Episode 274: reward: 122.000, steps: 122\n",
      "Episode 275: reward: 122.000, steps: 122\n",
      "Episode 276: reward: 115.000, steps: 115\n",
      "Episode 277: reward: 123.000, steps: 123\n",
      "Episode 278: reward: 114.000, steps: 114\n",
      "Episode 279: reward: 111.000, steps: 111\n",
      "Episode 280: reward: 109.000, steps: 109\n",
      "Episode 281: reward: 123.000, steps: 123\n",
      "Episode 282: reward: 121.000, steps: 121\n",
      "Episode 283: reward: 108.000, steps: 108\n",
      "Episode 284: reward: 110.000, steps: 110\n",
      "Episode 285: reward: 111.000, steps: 111\n",
      "Episode 286: reward: 117.000, steps: 117\n",
      "Episode 287: reward: 117.000, steps: 117\n",
      "Episode 288: reward: 115.000, steps: 115\n",
      "Episode 289: reward: 117.000, steps: 117\n",
      "Episode 290: reward: 112.000, steps: 112\n",
      "Episode 291: reward: 111.000, steps: 111\n",
      "Episode 292: reward: 108.000, steps: 108\n",
      "Episode 293: reward: 117.000, steps: 117\n",
      "Episode 294: reward: 114.000, steps: 114\n",
      "Episode 295: reward: 118.000, steps: 118\n",
      "Episode 296: reward: 16.000, steps: 16\n",
      "Episode 297: reward: 116.000, steps: 116\n",
      "Episode 298: reward: 115.000, steps: 115\n",
      "Episode 299: reward: 112.000, steps: 112\n",
      "Episode 300: reward: 117.000, steps: 117\n",
      "Episode 301: reward: 112.000, steps: 112\n",
      "Episode 302: reward: 119.000, steps: 119\n",
      "Episode 303: reward: 118.000, steps: 118\n",
      "Episode 304: reward: 121.000, steps: 121\n",
      "Episode 305: reward: 110.000, steps: 110\n",
      "Episode 306: reward: 117.000, steps: 117\n",
      "Episode 307: reward: 111.000, steps: 111\n",
      "Episode 308: reward: 115.000, steps: 115\n",
      "Episode 309: reward: 117.000, steps: 117\n",
      "Episode 310: reward: 112.000, steps: 112\n",
      "Episode 311: reward: 121.000, steps: 121\n",
      "Episode 312: reward: 116.000, steps: 116\n",
      "Episode 313: reward: 107.000, steps: 107\n",
      "Episode 314: reward: 114.000, steps: 114\n",
      "Episode 315: reward: 122.000, steps: 122\n",
      "Episode 316: reward: 117.000, steps: 117\n",
      "Episode 317: reward: 113.000, steps: 113\n",
      "Episode 318: reward: 112.000, steps: 112\n",
      "Episode 319: reward: 105.000, steps: 105\n",
      "Episode 320: reward: 114.000, steps: 114\n",
      "Episode 321: reward: 119.000, steps: 119\n",
      "Episode 322: reward: 117.000, steps: 117\n",
      "Episode 323: reward: 123.000, steps: 123\n",
      "Episode 324: reward: 117.000, steps: 117\n",
      "Episode 325: reward: 120.000, steps: 120\n",
      "Episode 326: reward: 117.000, steps: 117\n",
      "Episode 327: reward: 106.000, steps: 106\n",
      "Episode 328: reward: 121.000, steps: 121\n",
      "Episode 329: reward: 123.000, steps: 123\n",
      "Episode 330: reward: 119.000, steps: 119\n",
      "Episode 331: reward: 122.000, steps: 122\n",
      "Episode 332: reward: 123.000, steps: 123\n",
      "Episode 333: reward: 114.000, steps: 114\n",
      "Episode 334: reward: 122.000, steps: 122\n",
      "Episode 335: reward: 118.000, steps: 118\n",
      "Episode 336: reward: 120.000, steps: 120\n",
      "Episode 337: reward: 112.000, steps: 112\n",
      "Episode 338: reward: 118.000, steps: 118\n",
      "Episode 339: reward: 116.000, steps: 116\n",
      "Episode 340: reward: 115.000, steps: 115\n",
      "Episode 341: reward: 117.000, steps: 117\n",
      "Episode 342: reward: 121.000, steps: 121\n",
      "Episode 343: reward: 117.000, steps: 117\n",
      "Episode 344: reward: 112.000, steps: 112\n",
      "Episode 345: reward: 109.000, steps: 109\n",
      "Episode 346: reward: 115.000, steps: 115\n",
      "Episode 347: reward: 126.000, steps: 126\n",
      "Episode 348: reward: 114.000, steps: 114\n",
      "Episode 349: reward: 109.000, steps: 109\n",
      "Episode 350: reward: 109.000, steps: 109\n",
      "Episode 351: reward: 124.000, steps: 124\n",
      "Episode 352: reward: 118.000, steps: 118\n",
      "Episode 353: reward: 114.000, steps: 114\n",
      "Episode 354: reward: 121.000, steps: 121\n",
      "Episode 355: reward: 117.000, steps: 117\n",
      "Episode 356: reward: 120.000, steps: 120\n",
      "Episode 357: reward: 123.000, steps: 123\n",
      "Episode 358: reward: 121.000, steps: 121\n",
      "Episode 359: reward: 113.000, steps: 113\n",
      "Episode 360: reward: 105.000, steps: 105\n",
      "Episode 361: reward: 110.000, steps: 110\n",
      "Episode 362: reward: 118.000, steps: 118\n",
      "Episode 363: reward: 118.000, steps: 118\n",
      "Episode 364: reward: 119.000, steps: 119\n",
      "Episode 365: reward: 111.000, steps: 111\n",
      "Episode 366: reward: 124.000, steps: 124\n",
      "Episode 367: reward: 114.000, steps: 114\n",
      "Episode 368: reward: 115.000, steps: 115\n",
      "Episode 369: reward: 120.000, steps: 120\n",
      "Episode 370: reward: 14.000, steps: 14\n",
      "Episode 371: reward: 115.000, steps: 115\n",
      "Episode 372: reward: 120.000, steps: 120\n",
      "Episode 373: reward: 116.000, steps: 116\n",
      "Episode 374: reward: 108.000, steps: 108\n",
      "Episode 375: reward: 117.000, steps: 117\n",
      "Episode 376: reward: 103.000, steps: 103\n",
      "Episode 377: reward: 115.000, steps: 115\n",
      "Episode 378: reward: 113.000, steps: 113\n",
      "Episode 379: reward: 116.000, steps: 116\n",
      "Episode 380: reward: 118.000, steps: 118\n",
      "Episode 381: reward: 119.000, steps: 119\n",
      "Episode 382: reward: 115.000, steps: 115\n",
      "Episode 383: reward: 117.000, steps: 117\n",
      "Episode 384: reward: 116.000, steps: 116\n",
      "Episode 385: reward: 116.000, steps: 116\n",
      "Episode 386: reward: 118.000, steps: 118\n",
      "Episode 387: reward: 116.000, steps: 116\n",
      "Episode 388: reward: 115.000, steps: 115\n",
      "Episode 389: reward: 117.000, steps: 117\n",
      "Episode 390: reward: 125.000, steps: 125\n",
      "Episode 391: reward: 125.000, steps: 125\n",
      "Episode 392: reward: 111.000, steps: 111\n",
      "Episode 393: reward: 116.000, steps: 116\n",
      "Episode 394: reward: 113.000, steps: 113\n",
      "Episode 395: reward: 116.000, steps: 116\n",
      "Episode 396: reward: 116.000, steps: 116\n",
      "Episode 397: reward: 113.000, steps: 113\n",
      "Episode 398: reward: 116.000, steps: 116\n",
      "Episode 399: reward: 120.000, steps: 120\n",
      "Episode 400: reward: 116.000, steps: 116\n",
      "Episode 401: reward: 117.000, steps: 117\n",
      "Episode 402: reward: 114.000, steps: 114\n",
      "Episode 403: reward: 117.000, steps: 117\n",
      "Episode 404: reward: 119.000, steps: 119\n",
      "Episode 405: reward: 117.000, steps: 117\n",
      "Episode 406: reward: 118.000, steps: 118\n",
      "Episode 407: reward: 121.000, steps: 121\n",
      "Episode 408: reward: 119.000, steps: 119\n",
      "Episode 409: reward: 115.000, steps: 115\n",
      "Episode 410: reward: 115.000, steps: 115\n",
      "Episode 411: reward: 125.000, steps: 125\n",
      "Episode 412: reward: 116.000, steps: 116\n",
      "Episode 413: reward: 109.000, steps: 109\n",
      "Episode 414: reward: 110.000, steps: 110\n",
      "Episode 415: reward: 113.000, steps: 113\n",
      "Episode 416: reward: 114.000, steps: 114\n",
      "Episode 417: reward: 117.000, steps: 117\n",
      "Episode 418: reward: 115.000, steps: 115\n",
      "Episode 419: reward: 120.000, steps: 120\n",
      "Episode 420: reward: 120.000, steps: 120\n",
      "Episode 421: reward: 112.000, steps: 112\n",
      "Episode 422: reward: 112.000, steps: 112\n",
      "Episode 423: reward: 124.000, steps: 124\n",
      "Episode 424: reward: 121.000, steps: 121\n",
      "Episode 425: reward: 114.000, steps: 114\n",
      "Episode 426: reward: 121.000, steps: 121\n",
      "Episode 427: reward: 124.000, steps: 124\n",
      "Episode 428: reward: 111.000, steps: 111\n",
      "Episode 429: reward: 115.000, steps: 115\n",
      "Episode 430: reward: 125.000, steps: 125\n",
      "Episode 431: reward: 110.000, steps: 110\n",
      "Episode 432: reward: 116.000, steps: 116\n",
      "Episode 433: reward: 116.000, steps: 116\n",
      "Episode 434: reward: 118.000, steps: 118\n",
      "Episode 435: reward: 119.000, steps: 119\n",
      "Episode 436: reward: 115.000, steps: 115\n",
      "Episode 437: reward: 115.000, steps: 115\n",
      "Episode 438: reward: 110.000, steps: 110\n",
      "Episode 439: reward: 121.000, steps: 121\n",
      "Episode 440: reward: 117.000, steps: 117\n",
      "Episode 441: reward: 114.000, steps: 114\n",
      "Episode 442: reward: 120.000, steps: 120\n",
      "Episode 443: reward: 116.000, steps: 116\n",
      "Episode 444: reward: 113.000, steps: 113\n",
      "Episode 445: reward: 113.000, steps: 113\n",
      "Episode 446: reward: 113.000, steps: 113\n",
      "Episode 447: reward: 118.000, steps: 118\n",
      "Episode 448: reward: 106.000, steps: 106\n",
      "Episode 449: reward: 122.000, steps: 122\n",
      "Episode 450: reward: 110.000, steps: 110\n",
      "Episode 451: reward: 110.000, steps: 110\n",
      "Episode 452: reward: 111.000, steps: 111\n",
      "Episode 453: reward: 116.000, steps: 116\n",
      "Episode 454: reward: 120.000, steps: 120\n",
      "Episode 455: reward: 119.000, steps: 119\n",
      "Episode 456: reward: 119.000, steps: 119\n",
      "Episode 457: reward: 124.000, steps: 124\n",
      "Episode 458: reward: 113.000, steps: 113\n",
      "Episode 459: reward: 110.000, steps: 110\n",
      "Episode 460: reward: 111.000, steps: 111\n",
      "Episode 461: reward: 114.000, steps: 114\n",
      "Episode 462: reward: 110.000, steps: 110\n",
      "Episode 463: reward: 115.000, steps: 115\n",
      "Episode 464: reward: 118.000, steps: 118\n",
      "Episode 465: reward: 113.000, steps: 113\n",
      "Episode 466: reward: 113.000, steps: 113\n",
      "Episode 467: reward: 117.000, steps: 117\n",
      "Episode 468: reward: 118.000, steps: 118\n",
      "Episode 469: reward: 121.000, steps: 121\n",
      "Episode 470: reward: 119.000, steps: 119\n",
      "Episode 471: reward: 116.000, steps: 116\n",
      "Episode 472: reward: 114.000, steps: 114\n",
      "Episode 473: reward: 119.000, steps: 119\n",
      "Episode 474: reward: 118.000, steps: 118\n",
      "Episode 475: reward: 110.000, steps: 110\n",
      "Episode 476: reward: 119.000, steps: 119\n",
      "Episode 477: reward: 110.000, steps: 110\n",
      "Episode 478: reward: 121.000, steps: 121\n",
      "Episode 479: reward: 119.000, steps: 119\n",
      "Episode 480: reward: 121.000, steps: 121\n",
      "Episode 481: reward: 118.000, steps: 118\n",
      "Episode 482: reward: 15.000, steps: 15\n",
      "Episode 483: reward: 118.000, steps: 118\n",
      "Episode 484: reward: 17.000, steps: 17\n",
      "Episode 485: reward: 118.000, steps: 118\n",
      "Episode 486: reward: 29.000, steps: 29\n",
      "Episode 487: reward: 109.000, steps: 109\n",
      "Episode 488: reward: 122.000, steps: 122\n",
      "Episode 489: reward: 113.000, steps: 113\n",
      "Episode 490: reward: 121.000, steps: 121\n",
      "Episode 491: reward: 113.000, steps: 113\n",
      "Episode 492: reward: 120.000, steps: 120\n",
      "Episode 493: reward: 118.000, steps: 118\n",
      "Episode 494: reward: 111.000, steps: 111\n",
      "Episode 495: reward: 118.000, steps: 118\n",
      "Episode 496: reward: 120.000, steps: 120\n",
      "Episode 497: reward: 117.000, steps: 117\n",
      "Episode 498: reward: 118.000, steps: 118\n",
      "Episode 499: reward: 119.000, steps: 119\n",
      "Episode 500: reward: 117.000, steps: 117\n"
     ]
    }
   ],
   "source": [
    "#Fitting and testing our agent model for 500 episodes\n",
    "scores = sarsa.test(env, nb_episodes = 500, visualize= False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dsfmG3H5fpLy"
   },
   "outputs": [],
   "source": [
    "#Importing the necessary plotting libraries\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "sns.set()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 285
    },
    "colab_type": "code",
    "id": "pENuEDkAFjRv",
    "outputId": "d0441f65-5c92-498a-b767-30e1de1d9227"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing our resulted rewards\n",
    "plt.plot(scores.history['episode_reward'])\n",
    "plt.xlabel('Episode')\n",
    "plt.ylabel('Testing total reward')\n",
    "plt.title('Total rewards over all episodes in testing') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 136
    },
    "colab_type": "code",
    "id": "wDnK16YvFqzH",
    "outputId": "ea210503-b0a1-4bff-bb20-2988fb488061"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.9960373 , 0.00396272],\n",
       "       [0.9601623 , 0.0398377 ],\n",
       "       [0.9386001 , 0.06139983],\n",
       "       ...,\n",
       "       [0.49630713, 0.50369287],\n",
       "       [0.5007292 , 0.49927077],\n",
       "       [0.49682516, 0.50317484]], dtype=float32)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting the action probabilities vector\n",
    "np.array(sarsa.q_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "WzCQjTRo03DK"
   },
   "outputs": [],
   "source": [
    "#Saving our model\n",
    "sarsa.save_weights('sarsa_{}_weights.h5f'.format(env), overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "deepSARSA-final_version.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
